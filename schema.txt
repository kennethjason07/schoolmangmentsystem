-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.assignment_submissions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  assignment_id uuid NOT NULL,
  assignment_type text NOT NULL CHECK (assignment_type = ANY (ARRAY['assignment'::text, 'homework'::text])),
  student_id uuid NOT NULL,
  submitted_files jsonb DEFAULT '[]'::jsonb,
  status text DEFAULT 'submitted'::text CHECK (status = ANY (ARRAY['submitted'::text, 'graded'::text, 'returned'::text])),
  grade text,
  feedback text,
  submitted_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  graded_at timestamp with time zone,
  academic_year text DEFAULT (EXTRACT(year FROM CURRENT_DATE))::text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT assignment_submissions_pkey PRIMARY KEY (id),
  CONSTRAINT assignment_submissions_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT assignment_submissions_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id)
);
CREATE TABLE public.assignments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  file_url text,
  class_id uuid NOT NULL,
  subject_id uuid NOT NULL,
  assigned_by uuid NOT NULL,
  assigned_date date NOT NULL DEFAULT CURRENT_DATE,
  due_date date NOT NULL,
  academic_year text NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT assignments_pkey PRIMARY KEY (id),
  CONSTRAINT assignments_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT assignments_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.subjects(id),
  CONSTRAINT assignments_assigned_by_fkey FOREIGN KEY (assigned_by) REFERENCES public.teachers(id),
  CONSTRAINT assignments_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.classes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  class_name text NOT NULL,
  section text NOT NULL,
  academic_year text NOT NULL,
  class_teacher_id uuid,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT classes_pkey PRIMARY KEY (id),
  CONSTRAINT classes_class_teacher_id_fkey FOREIGN KEY (class_teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT classes_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  event_date date NOT NULL,
  start_time time without time zone,
  end_time time without time zone,
  event_type text DEFAULT 'Event'::text,
  location text,
  organizer text,
  is_school_wide boolean DEFAULT true,
  target_classes ARRAY,
  target_students ARRAY,
  status text DEFAULT 'Active'::text,
  icon text DEFAULT 'calendar'::text,
  color text DEFAULT '#FF9800'::text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  created_by uuid,
  tenant_id uuid NOT NULL,
  CONSTRAINT events_pkey PRIMARY KEY (id),
  CONSTRAINT events_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT events_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.exams (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  class_id uuid NOT NULL,
  academic_year text NOT NULL,
  start_date date NOT NULL,
  end_date date NOT NULL,
  remarks text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  max_marks numeric NOT NULL DEFAULT 100,
  tenant_id uuid NOT NULL,
  CONSTRAINT exams_pkey PRIMARY KEY (id),
  CONSTRAINT exams_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT exams_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.expense_categories (
  id bigint NOT NULL DEFAULT nextval('expense_categories_id_seq'::regclass),
  name character varying NOT NULL UNIQUE,
  monthly_budget numeric DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  tenant_id uuid NOT NULL,
  CONSTRAINT expense_categories_pkey PRIMARY KEY (id),
  CONSTRAINT expense_categories_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.facial_recognition_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_type text NOT NULL CHECK (event_type = ANY (ARRAY['enrollment'::text, 'recognition_attempt'::text, 'recognition_success'::text, 'recognition_failure'::text])),
  person_id uuid,
  person_type text CHECK (person_type = ANY (ARRAY['student'::text, 'teacher'::text, 'unknown'::text])),
  matched_template_id uuid,
  confidence_score numeric CHECK (confidence_score >= 0.0 AND confidence_score <= 1.0),
  recognition_method text DEFAULT 'camera'::text CHECK (recognition_method = ANY (ARRAY['camera'::text, 'uploaded_image'::text, 'batch_process'::text])),
  input_image_url text,
  recognition_duration_ms integer,
  device_info jsonb,
  location_info jsonb,
  error_message text,
  performed_by uuid,
  performed_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  ip_address inet,
  user_agent text,
  session_id text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT facial_recognition_events_pkey PRIMARY KEY (id),
  CONSTRAINT facial_recognition_events_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT facial_recognition_events_matched_template_fkey FOREIGN KEY (matched_template_id) REFERENCES public.facial_templates(id),
  CONSTRAINT facial_recognition_events_performed_by_fkey FOREIGN KEY (performed_by) REFERENCES public.users(id)
);
CREATE TABLE public.facial_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  person_id uuid NOT NULL,
  person_type text NOT NULL CHECK (person_type = ANY (ARRAY['student'::text, 'teacher'::text])),
  template_name text NOT NULL DEFAULT 'primary'::text,
  face_encoding bytea,
  face_image_url text,
  confidence_threshold numeric DEFAULT 0.8 CHECK (confidence_threshold >= 0.0 AND confidence_threshold <= 1.0),
  is_active boolean DEFAULT true,
  enrollment_method text DEFAULT 'manual'::text CHECK (enrollment_method = ANY (ARRAY['manual'::text, 'bulk_upload'::text, 'auto_capture'::text])),
  enrolled_by uuid,
  enrollment_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  last_used timestamp with time zone,
  usage_count integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  azure_person_id text,
  CONSTRAINT facial_templates_pkey PRIMARY KEY (id),
  CONSTRAINT facial_templates_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT facial_templates_enrolled_by_fkey FOREIGN KEY (enrolled_by) REFERENCES public.users(id)
);
CREATE TABLE public.fee_structure (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  academic_year text NOT NULL,
  class_id uuid,
  student_id uuid,
  fee_component text NOT NULL,
  amount numeric NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  due_date date,
  base_amount numeric NOT NULL,
  tenant_id uuid NOT NULL,
  discount_applied numeric DEFAULT 0,
  CONSTRAINT fee_structure_pkey PRIMARY KEY (id),
  CONSTRAINT fee_structure_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT fee_structure_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT fee_structure_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.homeworks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  instructions text,
  due_date date,
  class_id uuid,
  subject_id uuid,
  teacher_id uuid,
  assigned_students ARRAY,
  files jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  tenant_id uuid NOT NULL,
  CONSTRAINT homeworks_pkey PRIMARY KEY (id),
  CONSTRAINT homeworks_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT homeworks_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT homeworks_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.subjects(id),
  CONSTRAINT homeworks_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id)
);
CREATE TABLE public.hostel_applications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  student_id uuid NOT NULL,
  hostel_id uuid,
  status text NOT NULL DEFAULT 'submitted'::text CHECK (status = ANY (ARRAY['submitted'::text, 'verified'::text, 'accepted'::text, 'rejected'::text, 'waitlisted'::text])),
  academic_year text NOT NULL,
  preferred_room_type text,
  medical_conditions text,
  emergency_contact_name text,
  emergency_contact_phone text,
  parent_consent boolean DEFAULT false,
  remarks text,
  applied_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  verified_by uuid,
  verified_at timestamp with time zone,
  decision_by uuid,
  decision_at timestamp with time zone,
  updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_applications_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_applications_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_applications_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT hostel_applications_hostel_id_fkey FOREIGN KEY (hostel_id) REFERENCES public.hostels(id),
  CONSTRAINT hostel_applications_verified_by_fkey FOREIGN KEY (verified_by) REFERENCES public.users(id),
  CONSTRAINT hostel_applications_decision_by_fkey FOREIGN KEY (decision_by) REFERENCES public.users(id)
);
CREATE TABLE public.hostel_bed_allocations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  application_id uuid,
  student_id uuid NOT NULL,
  bed_id uuid NOT NULL,
  academic_year text NOT NULL,
  monthly_rent numeric,
  security_deposit numeric,
  status text NOT NULL DEFAULT 'pending_acceptance'::text CHECK (status = ANY (ARRAY['pending_acceptance'::text, 'active'::text, 'cancelled'::text, 'ended'::text, 'suspended'::text])),
  acceptance_deadline timestamp with time zone,
  student_response text CHECK (student_response = ANY (ARRAY['accepted'::text, 'rejected'::text])),
  start_date date NOT NULL DEFAULT CURRENT_DATE,
  end_date date,
  notes text,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_bed_allocations_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_bed_allocations_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_bed_allocations_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.hostel_applications(id),
  CONSTRAINT hostel_bed_allocations_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT hostel_bed_allocations_bed_id_fkey FOREIGN KEY (bed_id) REFERENCES public.hostel_beds(id),
  CONSTRAINT hostel_bed_allocations_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.hostel_bed_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  bed_id uuid NOT NULL,
  student_id uuid,
  allocation_id uuid,
  action text NOT NULL CHECK (action = ANY (ARRAY['assigned'::text, 'cancelled'::text, 'ended'::text, 'maintenance'::text, 'released'::text, 'transferred'::text])),
  start_date date NOT NULL DEFAULT CURRENT_DATE,
  end_date date,
  notes text,
  performed_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_bed_history_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_bed_history_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_bed_history_bed_id_fkey FOREIGN KEY (bed_id) REFERENCES public.hostel_beds(id),
  CONSTRAINT hostel_bed_history_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT hostel_bed_history_allocation_id_fkey FOREIGN KEY (allocation_id) REFERENCES public.hostel_bed_allocations(id),
  CONSTRAINT hostel_bed_history_performed_by_fkey FOREIGN KEY (performed_by) REFERENCES public.users(id)
);
CREATE TABLE public.hostel_beds (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  room_id uuid NOT NULL,
  bed_label text NOT NULL,
  bed_type text DEFAULT 'normal'::text CHECK (bed_type = ANY (ARRAY['normal'::text, 'bunk'::text, 'deluxe'::text])),
  status text NOT NULL DEFAULT 'available'::text CHECK (status = ANY (ARRAY['available'::text, 'reserved'::text, 'occupied'::text, 'maintenance'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_beds_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_beds_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_beds_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.hostel_rooms(id)
);
CREATE TABLE public.hostel_blocks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  hostel_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  floor_count integer DEFAULT 1,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_blocks_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_blocks_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_blocks_hostel_id_fkey FOREIGN KEY (hostel_id) REFERENCES public.hostels(id)
);
CREATE TABLE public.hostel_fee_payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  student_id uuid NOT NULL,
  allocation_id uuid,
  academic_year text NOT NULL,
  fee_type text NOT NULL CHECK (fee_type = ANY (ARRAY['monthly_rent'::text, 'security_deposit'::text, 'admission_fee'::text, 'maintenance_fee'::text, 'other'::text])),
  amount_due numeric NOT NULL,
  amount_paid numeric NOT NULL DEFAULT 0,
  payment_date date NOT NULL DEFAULT CURRENT_DATE,
  due_date date,
  payment_mode text DEFAULT 'Cash'::text CHECK (payment_mode = ANY (ARRAY['Cash'::text, 'Card'::text, 'Online'::text, 'UPI'::text])),
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'partial'::text, 'paid'::text, 'overdue'::text, 'cancelled'::text])),
  receipt_number text UNIQUE,
  remarks text,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_fee_payments_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_fee_payments_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_fee_payments_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT hostel_fee_payments_allocation_id_fkey FOREIGN KEY (allocation_id) REFERENCES public.hostel_bed_allocations(id)
);
CREATE TABLE public.hostel_maintenance_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  hostel_id uuid NOT NULL,
  room_id uuid,
  bed_id uuid,
  issue_type text NOT NULL DEFAULT 'other'::text CHECK (issue_type = ANY (ARRAY['electrical'::text, 'plumbing'::text, 'furniture'::text, 'structural'::text, 'cleaning'::text, 'security'::text, 'internet'::text, 'other'::text])),
  title text NOT NULL,
  description text NOT NULL,
  priority text NOT NULL DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'urgent'::text])),
  status text NOT NULL DEFAULT 'reported'::text CHECK (status = ANY (ARRAY['reported'::text, 'assigned'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text])),
  estimated_cost numeric,
  actual_cost numeric,
  assigned_to uuid,
  completed_by uuid,
  reporter_name text,
  reporter_contact text,
  reported_by uuid,
  reported_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  completed_at timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_maintenance_logs_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_maintenance_logs_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_maintenance_logs_hostel_id_fkey FOREIGN KEY (hostel_id) REFERENCES public.hostels(id),
  CONSTRAINT hostel_maintenance_logs_room_id_fkey FOREIGN KEY (room_id) REFERENCES public.hostel_rooms(id),
  CONSTRAINT hostel_maintenance_logs_bed_id_fkey FOREIGN KEY (bed_id) REFERENCES public.hostel_beds(id),
  CONSTRAINT hostel_maintenance_logs_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES public.users(id),
  CONSTRAINT hostel_maintenance_logs_completed_by_fkey FOREIGN KEY (completed_by) REFERENCES public.users(id),
  CONSTRAINT hostel_maintenance_logs_reported_by_fkey FOREIGN KEY (reported_by) REFERENCES public.users(id)
);
CREATE TABLE public.hostel_rooms (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  hostel_id uuid NOT NULL,
  block_id uuid,
  floor integer,
  room_number text NOT NULL,
  room_type text DEFAULT 'double'::text CHECK (room_type = ANY (ARRAY['single'::text, 'double'::text, 'triple'::text, 'quad'::text])),
  capacity integer NOT NULL DEFAULT 0,
  is_active boolean NOT NULL DEFAULT true,
  monthly_rent numeric,
  amenities jsonb DEFAULT '[]'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostel_rooms_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_rooms_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_rooms_hostel_id_fkey FOREIGN KEY (hostel_id) REFERENCES public.hostels(id),
  CONSTRAINT hostel_rooms_block_id_fkey FOREIGN KEY (block_id) REFERENCES public.hostel_blocks(id)
);
CREATE TABLE public.hostel_waitlist (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  application_id uuid NOT NULL,
  hostel_id uuid NOT NULL,
  priority_score integer NOT NULL DEFAULT 1000,
  notes text,
  added_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  removed_at timestamp with time zone,
  removal_reason text CHECK (removal_reason = ANY (ARRAY['allocated'::text, 'rejected'::text, 'withdrawn'::text, 'expired'::text])),
  CONSTRAINT hostel_waitlist_pkey PRIMARY KEY (id),
  CONSTRAINT hostel_waitlist_hostel_id_fkey FOREIGN KEY (hostel_id) REFERENCES public.hostels(id),
  CONSTRAINT hostel_waitlist_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT hostel_waitlist_application_id_fkey FOREIGN KEY (application_id) REFERENCES public.hostel_applications(id)
);
CREATE TABLE public.hostels (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  name text NOT NULL,
  description text,
  hostel_type text DEFAULT 'mixed'::text CHECK (hostel_type = ANY (ARRAY['boys'::text, 'girls'::text, 'mixed'::text])),
  capacity integer NOT NULL DEFAULT 0,
  is_active boolean NOT NULL DEFAULT true,
  contact_phone text,
  address text,
  warden_name text,
  warden_phone text,
  created_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT hostels_pkey PRIMARY KEY (id),
  CONSTRAINT hostels_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.leave_applications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  teacher_id uuid NOT NULL,
  leave_type text NOT NULL CHECK (leave_type = ANY (ARRAY['Sick Leave'::text, 'Casual Leave'::text, 'Earned Leave'::text, 'Maternity Leave'::text, 'Paternity Leave'::text, 'Emergency Leave'::text, 'Personal Leave'::text, 'Medical Leave'::text, 'Other'::text])),
  start_date date NOT NULL,
  end_date date NOT NULL,
  total_days integer NOT NULL DEFAULT 1 CHECK (total_days > 0),
  reason text NOT NULL,
  attachment_url text,
  applied_date timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  applied_by uuid NOT NULL,
  status text NOT NULL DEFAULT 'Pending'::text CHECK (status = ANY (ARRAY['Pending'::text, 'Approved'::text, 'Rejected'::text, 'Cancelled'::text])),
  reviewed_by uuid,
  reviewed_at timestamp with time zone,
  admin_remarks text,
  replacement_teacher_id uuid,
  replacement_notes text,
  academic_year text NOT NULL DEFAULT (EXTRACT(year FROM CURRENT_DATE))::text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT leave_applications_pkey PRIMARY KEY (id),
  CONSTRAINT leave_applications_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT leave_applications_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT leave_applications_applied_by_fkey FOREIGN KEY (applied_by) REFERENCES public.users(id),
  CONSTRAINT leave_applications_reviewed_by_fkey FOREIGN KEY (reviewed_by) REFERENCES public.users(id),
  CONSTRAINT leave_applications_replacement_teacher_id_fkey FOREIGN KEY (replacement_teacher_id) REFERENCES public.teachers(id)
);
CREATE TABLE public.marks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid,
  exam_id uuid,
  subject_id uuid,
  marks_obtained numeric,
  grade text,
  max_marks numeric NOT NULL,
  remarks text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT marks_pkey PRIMARY KEY (id),
  CONSTRAINT marks_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT marks_exam_id_fkey FOREIGN KEY (exam_id) REFERENCES public.exams(id),
  CONSTRAINT marks_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.subjects(id),
  CONSTRAINT marks_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  sender_id uuid NOT NULL,
  receiver_id uuid NOT NULL,
  student_id uuid,
  message text NOT NULL,
  sent_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  is_read boolean DEFAULT false,
  message_type text DEFAULT 'text'::text CHECK (message_type = ANY (ARRAY['text'::text, 'image'::text, 'file'::text])),
  file_url text,
  file_name text,
  file_size integer,
  file_type text,
  tenant_id uuid NOT NULL,
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.users(id),
  CONSTRAINT messages_receiver_id_fkey FOREIGN KEY (receiver_id) REFERENCES public.users(id),
  CONSTRAINT messages_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT messages_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.notification_recipients (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  notification_id uuid NOT NULL,
  recipient_id uuid NOT NULL,
  recipient_type text NOT NULL CHECK (recipient_type = ANY (ARRAY['Student'::text, 'Parent'::text, 'Teacher'::text, 'Admin'::text])),
  delivery_status text DEFAULT 'Pending'::text CHECK (delivery_status = ANY (ARRAY['Pending'::text, 'Sent'::text, 'Failed'::text])),
  sent_at timestamp without time zone,
  is_read boolean DEFAULT false,
  read_at timestamp without time zone,
  tenant_id uuid NOT NULL,
  CONSTRAINT notification_recipients_pkey PRIMARY KEY (id),
  CONSTRAINT fk_user FOREIGN KEY (recipient_id) REFERENCES public.users(id),
  CONSTRAINT fk_notification FOREIGN KEY (notification_id) REFERENCES public.notifications(id),
  CONSTRAINT notification_recipients_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type USER-DEFINED NOT NULL,
  message text NOT NULL,
  delivery_mode text DEFAULT 'InApp'::text CHECK (delivery_mode = ANY (ARRAY['InApp'::text, 'SMS'::text, 'WhatsApp'::text])),
  delivery_status text DEFAULT 'Pending'::text CHECK (delivery_status = ANY (ARRAY['Pending'::text, 'Sent'::text, 'Failed'::text])),
  sent_by uuid,
  scheduled_at timestamp without time zone,
  sent_at timestamp without time zone,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_sent_by_fkey FOREIGN KEY (sent_by) REFERENCES public.users(id),
  CONSTRAINT notifications_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.parents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  phone text,
  email text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  student_id uuid,
  relation text CHECK (relation = ANY (ARRAY['Father'::text, 'Mother'::text, 'Guardian'::text])),
  tenant_id uuid NOT NULL,
  CONSTRAINT parents_pkey PRIMARY KEY (id),
  CONSTRAINT parents_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT parents_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id)
);
CREATE TABLE public.period_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  period_number integer NOT NULL CHECK (period_number > 0),
  start_time time without time zone NOT NULL,
  end_time time without time zone NOT NULL,
  duration_minutes integer DEFAULT (EXTRACT(epoch FROM (end_time - start_time)) / (60)::numeric),
  period_name text,
  period_type text DEFAULT 'class'::text CHECK (period_type = ANY (ARRAY['class'::text, 'break'::text, 'lunch'::text])),
  is_active boolean DEFAULT true,
  academic_year text NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT period_settings_pkey PRIMARY KEY (id),
  CONSTRAINT period_settings_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.personal_tasks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  task_title character varying NOT NULL,
  task_description text,
  task_type character varying NOT NULL DEFAULT 'general'::character varying CHECK (task_type::text = ANY (ARRAY['attendance'::character varying, 'marks'::character varying, 'homework'::character varying, 'meeting'::character varying, 'report'::character varying, 'planning'::character varying, 'general'::character varying]::text[])),
  priority character varying NOT NULL DEFAULT 'medium'::character varying CHECK (priority::text = ANY (ARRAY['high'::character varying, 'medium'::character varying, 'low'::character varying]::text[])),
  status character varying NOT NULL DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  due_date date,
  completed_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  tenant_id uuid NOT NULL,
  CONSTRAINT personal_tasks_pkey PRIMARY KEY (id),
  CONSTRAINT personal_tasks_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id),
  CONSTRAINT personal_tasks_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.roles (
  id integer NOT NULL DEFAULT nextval('roles_id_seq'::regclass),
  role_name text NOT NULL,
  tenant_id uuid NOT NULL,
  CONSTRAINT roles_pkey PRIMARY KEY (id),
  CONSTRAINT roles_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.school_details (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  type text DEFAULT 'School'::text,
  address text,
  city text,
  state text,
  pincode text,
  phone text,
  email text,
  website text,
  principal_name text,
  established_year text,
  affiliation text,
  logo_url text,
  description text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT school_details_pkey PRIMARY KEY (id),
  CONSTRAINT school_details_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.school_expenses (
  id bigint NOT NULL DEFAULT nextval('school_expenses_id_seq'::regclass),
  title character varying NOT NULL,
  amount numeric NOT NULL CHECK (amount > 0::numeric),
  category character varying NOT NULL,
  description text,
  expense_date date NOT NULL DEFAULT CURRENT_DATE,
  created_at timestamp with time zone DEFAULT now(),
  tenant_id uuid NOT NULL,
  CONSTRAINT school_expenses_pkey PRIMARY KEY (id),
  CONSTRAINT school_expenses_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.school_upi_settings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  tenant_id uuid NOT NULL,
  upi_id text NOT NULL CHECK (upi_id ~* '^[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+$'::text),
  upi_name text NOT NULL,
  is_primary boolean DEFAULT false,
  is_active boolean DEFAULT true,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  created_by uuid,
  updated_by uuid,
  CONSTRAINT school_upi_settings_pkey PRIMARY KEY (id),
  CONSTRAINT school_upi_settings_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.stationary_items (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  tenant_id uuid NOT NULL,
  name character varying NOT NULL,
  description text,
  fee_amount numeric NOT NULL CHECK (fee_amount >= 0::numeric),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  created_by uuid,
  CONSTRAINT stationary_items_pkey PRIMARY KEY (id),
  CONSTRAINT stationary_items_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT stationary_items_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.stationary_purchases (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  tenant_id uuid NOT NULL,
  student_id uuid NOT NULL,
  class_id uuid NOT NULL,
  item_id uuid NOT NULL,
  quantity integer NOT NULL DEFAULT 1 CHECK (quantity > 0),
  unit_price numeric NOT NULL CHECK (unit_price >= 0::numeric),
  total_amount numeric NOT NULL CHECK (total_amount >= 0::numeric),
  payment_date date NOT NULL DEFAULT CURRENT_DATE,
  payment_mode character varying NOT NULL DEFAULT 'Cash'::character varying,
  receipt_number character varying UNIQUE,
  academic_year character varying,
  remarks text,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  created_by uuid,
  CONSTRAINT stationary_purchases_pkey PRIMARY KEY (id),
  CONSTRAINT stationary_purchases_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT stationary_purchases_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT stationary_purchases_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT stationary_purchases_item_id_fkey FOREIGN KEY (item_id) REFERENCES public.stationary_items(id),
  CONSTRAINT stationary_purchases_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.users(id)
);
CREATE TABLE public.student_attendance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid NOT NULL,
  class_id uuid NOT NULL,
  date date NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['Present'::text, 'Absent'::text])),
  marked_by uuid,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  verification_method text DEFAULT 'manual'::text CHECK (verification_method = ANY (ARRAY['manual'::text, 'facial_recognition'::text, 'hybrid'::text])),
  recognition_event_id uuid,
  recognition_confidence numeric CHECK (recognition_confidence >= 0.0 AND recognition_confidence <= 1.0),
  recognition_duration_ms integer,
  backup_verification text,
  verification_notes text,
  CONSTRAINT student_attendance_pkey PRIMARY KEY (id),
  CONSTRAINT student_attendance_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT student_attendance_marked_by_fkey FOREIGN KEY (marked_by) REFERENCES public.users(id),
  CONSTRAINT student_attendance_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT student_attendance_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT student_attendance_recognition_event_fkey FOREIGN KEY (recognition_event_id) REFERENCES public.facial_recognition_events(id)
);
CREATE TABLE public.student_discounts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid NOT NULL,
  class_id uuid NOT NULL,
  academic_year text NOT NULL,
  discount_type text NOT NULL CHECK (discount_type = ANY (ARRAY['percentage'::text, 'fixed_amount'::text])),
  discount_value numeric NOT NULL,
  fee_component text,
  description text,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  created_by uuid,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT student_discounts_pkey PRIMARY KEY (id),
  CONSTRAINT student_discounts_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT student_discounts_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT student_discounts_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id)
);
CREATE TABLE public.student_fees (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid,
  academic_year text NOT NULL,
  fee_component text NOT NULL,
  amount_paid numeric NOT NULL,
  payment_date date NOT NULL,
  payment_mode text CHECK (payment_mode = ANY (ARRAY['Cash'::text, 'Card'::text, 'Online'::text, 'UPI'::text])),
  remarks text,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  receipt_number bigint NOT NULL DEFAULT nextval('receipt_number_seq'::regclass) UNIQUE,
  tenant_id uuid NOT NULL,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying, 'partial'::character varying, 'paid'::character varying, 'overdue'::character varying, 'cancelled'::character varying]::text[])),
  remaining_amount numeric DEFAULT 0,
  total_amount numeric DEFAULT 0,
  CONSTRAINT student_fees_pkey PRIMARY KEY (id),
  CONSTRAINT student_fees_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT student_fees_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.students (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  admission_no text NOT NULL,
  name text NOT NULL,
  dob date NOT NULL,
  aadhar_no text,
  place_of_birth text,
  nationality text,
  gender text NOT NULL CHECK (gender = ANY (ARRAY['Male'::text, 'Female'::text])),
  religion text,
  caste text CHECK (caste = ANY (ARRAY['BC'::text, 'SC'::text, 'ST'::text, 'OC'::text, 'Other'::text])),
  address text,
  pin_code text,
  blood_group text,
  mother_tongue text,
  identification_mark_1 text,
  identification_mark_2 text,
  academic_year text NOT NULL,
  general_behaviour text CHECK (general_behaviour = ANY (ARRAY['Mild'::text, 'Normal'::text, 'Hyperactive'::text])),
  remarks text,
  roll_no integer,
  class_id uuid,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  parent_id uuid,
  tenant_id uuid NOT NULL,
  CONSTRAINT students_pkey PRIMARY KEY (id),
  CONSTRAINT students_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT students_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT students_parent_id_fkey FOREIGN KEY (parent_id) REFERENCES public.parents(id)
);
CREATE TABLE public.subjects (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  class_id uuid NOT NULL,
  academic_year text NOT NULL,
  is_optional boolean DEFAULT false,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT subjects_pkey PRIMARY KEY (id),
  CONSTRAINT subjects_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT subjects_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.tasks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  description text,
  due_date date,
  priority text DEFAULT 'Medium'::text CHECK (priority = ANY (ARRAY['Low'::text, 'Medium'::text, 'High'::text])),
  status text DEFAULT 'Pending'::text CHECK (status = ANY (ARRAY['Pending'::text, 'In Progress'::text, 'Completed'::text])),
  assigned_teacher_ids ARRAY,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  task_type character varying DEFAULT 'general'::character varying CHECK (task_type::text = ANY (ARRAY['attendance'::character varying, 'marks'::character varying, 'homework'::character varying, 'meeting'::character varying, 'report'::character varying, 'planning'::character varying, 'general'::character varying, 'administrative'::character varying]::text[])),
  completed_at timestamp with time zone,
  tenant_id uuid NOT NULL,
  CONSTRAINT tasks_pkey PRIMARY KEY (id),
  CONSTRAINT tasks_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.teacher_attendance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  teacher_id uuid NOT NULL,
  date date NOT NULL,
  status text NOT NULL CHECK (status = ANY (ARRAY['Present'::text, 'Absent'::text])),
  marked_by uuid,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  verification_method text DEFAULT 'manual'::text CHECK (verification_method = ANY (ARRAY['manual'::text, 'facial_recognition'::text, 'hybrid'::text])),
  recognition_event_id uuid,
  recognition_confidence numeric CHECK (recognition_confidence >= 0.0 AND recognition_confidence <= 1.0),
  recognition_duration_ms integer,
  backup_verification text,
  verification_notes text,
  CONSTRAINT teacher_attendance_pkey PRIMARY KEY (id),
  CONSTRAINT teacher_attendance_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT teacher_attendance_marked_by_fkey FOREIGN KEY (marked_by) REFERENCES public.users(id),
  CONSTRAINT teacher_attendance_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT teacher_attendance_recognition_event_fkey FOREIGN KEY (recognition_event_id) REFERENCES public.facial_recognition_events(id)
);
CREATE TABLE public.teacher_leave_balance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  teacher_id uuid NOT NULL,
  academic_year text NOT NULL,
  sick_leave_total integer DEFAULT 12,
  sick_leave_used integer DEFAULT 0,
  casual_leave_total integer DEFAULT 12,
  casual_leave_used integer DEFAULT 0,
  earned_leave_total integer DEFAULT 20,
  earned_leave_used integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT teacher_leave_balance_pkey PRIMARY KEY (id),
  CONSTRAINT teacher_leave_balance_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT teacher_leave_balance_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id)
);
CREATE TABLE public.teacher_subjects (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  teacher_id uuid,
  subject_id uuid,
  assigned_on timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT teacher_subjects_pkey PRIMARY KEY (id),
  CONSTRAINT teacher_subjects_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT teacher_subjects_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.subjects(id),
  CONSTRAINT teacher_subjects_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.teachers (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  qualification text,
  age integer CHECK (age > 18),
  salary_type text NOT NULL CHECK (salary_type = ANY (ARRAY['monthly'::text, 'hourly'::text])),
  salary_amount numeric NOT NULL,
  address text,
  is_class_teacher boolean DEFAULT false,
  assigned_class_id uuid,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  phone text,
  tenant_id uuid NOT NULL,
  CONSTRAINT teachers_pkey PRIMARY KEY (id),
  CONSTRAINT teachers_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.tenants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  subdomain text UNIQUE,
  domain text UNIQUE,
  database_url text,
  status text NOT NULL DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'suspended'::text, 'inactive'::text])),
  subscription_plan text DEFAULT 'basic'::text CHECK (subscription_plan = ANY (ARRAY['basic'::text, 'standard'::text, 'premium'::text, 'enterprise'::text])),
  max_students integer DEFAULT 500,
  max_teachers integer DEFAULT 50,
  max_classes integer DEFAULT 20,
  features jsonb DEFAULT '{"fees": true, "exams": true, "messaging": true, "attendance": true}'::jsonb,
  settings jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  expires_at timestamp with time zone,
  contact_email text,
  contact_phone text,
  address text,
  logo_url text,
  timezone text DEFAULT 'UTC'::text,
  academic_year_start_month integer DEFAULT 4,
  CONSTRAINT tenants_pkey PRIMARY KEY (id)
);
CREATE TABLE public.timetable_entries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  class_id uuid NOT NULL,
  subject_id uuid NOT NULL,
  teacher_id uuid NOT NULL,
  day_of_week text NOT NULL CHECK (day_of_week = ANY (ARRAY['Monday'::text, 'Tuesday'::text, 'Wednesday'::text, 'Thursday'::text, 'Friday'::text, 'Saturday'::text])),
  period_number integer NOT NULL CHECK (period_number > 0),
  start_time time without time zone NOT NULL,
  end_time time without time zone NOT NULL,
  academic_year text NOT NULL,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  CONSTRAINT timetable_entries_pkey PRIMARY KEY (id),
  CONSTRAINT timetable_entries_class_id_fkey FOREIGN KEY (class_id) REFERENCES public.classes(id),
  CONSTRAINT timetable_entries_subject_id_fkey FOREIGN KEY (subject_id) REFERENCES public.subjects(id),
  CONSTRAINT timetable_entries_teacher_id_fkey FOREIGN KEY (teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT timetable_entries_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id)
);
CREATE TABLE public.upi_transactions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  student_id uuid NOT NULL,
  student_fee_id uuid,
  amount numeric NOT NULL,
  upi_id character varying NOT NULL DEFAULT 'hanokalure0@okhdfcbank'::character varying,
  payment_status character varying NOT NULL DEFAULT 'PENDING'::character varying CHECK (payment_status::text = ANY (ARRAY['PENDING'::character varying, 'SUCCESS'::character varying, 'FAILED'::character varying, 'PENDING_ADMIN_VERIFICATION'::character varying]::text[])),
  qr_data text NOT NULL,
  admin_verified_by uuid,
  verified_at timestamp with time zone,
  verification_notes text,
  fee_component character varying NOT NULL,
  academic_year character varying NOT NULL,
  payment_date date NOT NULL DEFAULT CURRENT_DATE,
  created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
  tenant_id uuid NOT NULL,
  reference_number character varying NOT NULL UNIQUE,
  CONSTRAINT upi_transactions_pkey PRIMARY KEY (id),
  CONSTRAINT upi_transactions_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT upi_transactions_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id),
  CONSTRAINT upi_transactions_student_fee_id_fkey FOREIGN KEY (student_fee_id) REFERENCES public.student_fees(id),
  CONSTRAINT upi_transactions_admin_verified_by_fkey FOREIGN KEY (admin_verified_by) REFERENCES public.users(id)
);
CREATE TABLE public.users (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text NOT NULL UNIQUE,
  role_id integer,
  linked_student_id uuid,
  linked_teacher_id uuid,
  linked_parent_of uuid,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  password text,
  full_name text NOT NULL DEFAULT ''::text,
  phone text,
  profile_url text,
  tenant_id uuid NOT NULL,
  features jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_tenant_id_fkey FOREIGN KEY (tenant_id) REFERENCES public.tenants(id),
  CONSTRAINT users_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.roles(id),
  CONSTRAINT users_linked_student_id_fkey FOREIGN KEY (linked_student_id) REFERENCES public.students(id),
  CONSTRAINT users_linked_teacher_id_fkey FOREIGN KEY (linked_teacher_id) REFERENCES public.teachers(id),
  CONSTRAINT users_linked_parent_of_fkey FOREIGN KEY (linked_parent_of) REFERENCES public.students(id)
);