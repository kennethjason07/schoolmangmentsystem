/**
 * Schema Validation for Student Discounts
 * Based on the student_discounts table schema from schema.txt
 */

/**
 * Validate student discount data against the database schema
 * @param {Object} discountData - The discount data to validate
 * @returns {Object} - Validation result with isValid boolean and errors array
 */
function validateStudentDiscountSchema(discountData) {
  const errors = [];
  
  // Required fields validation
  if (!discountData.student_id) {
    errors.push('student_id is required (UUID)');
  } else if (typeof discountData.student_id !== 'string') {
    errors.push('student_id must be a string (UUID format)');
  }
  
  if (!discountData.class_id) {
    errors.push('class_id is required (UUID)');
  } else if (typeof discountData.class_id !== 'string') {
    errors.push('class_id must be a string (UUID format)');
  }
  
  if (!discountData.academic_year) {
    errors.push('academic_year is required (TEXT)');
  } else if (typeof discountData.academic_year !== 'string') {
    errors.push('academic_year must be a string');
  }
  
  if (!discountData.discount_type) {
    errors.push('discount_type is required');
  } else if (!['percentage', 'fixed_amount'].includes(discountData.discount_type)) {
    errors.push('discount_type must be either "percentage" or "fixed_amount"');
  }
  
  if (discountData.discount_value === undefined || discountData.discount_value === null) {
    errors.push('discount_value is required (NUMERIC)');
  } else if (typeof discountData.discount_value !== 'number' && isNaN(Number(discountData.discount_value))) {
    errors.push('discount_value must be a valid number');
  } else {
    const numericValue = Number(discountData.discount_value);
    if (numericValue < 0) {
      errors.push('discount_value must be positive');
    }
    if (discountData.discount_type === 'percentage' && numericValue > 100) {
      errors.push('discount_value for percentage type cannot exceed 100');
    }
  }
  
  // Optional fields validation
  if (discountData.fee_component !== undefined && discountData.fee_component !== null) {
    if (typeof discountData.fee_component !== 'string') {
      errors.push('fee_component must be a string');
    }
  }
  
  if (discountData.description !== undefined && discountData.description !== null) {
    if (typeof discountData.description !== 'string') {
      errors.push('description must be a string');
    }
  }
  
  if (discountData.is_active !== undefined && discountData.is_active !== null) {
    if (typeof discountData.is_active !== 'boolean') {
      errors.push('is_active must be a boolean');
    }
  }
  
  if (discountData.created_by !== undefined && discountData.created_by !== null) {
    if (typeof discountData.created_by !== 'string') {
      errors.push('created_by must be a string (UUID format)');
    }
  }
  
  return {
    isValid: errors.length === 0,
    errors: errors,
    validatedData: {
      student_id: discountData.student_id,
      class_id: discountData.class_id,
      academic_year: discountData.academic_year,
      discount_type: discountData.discount_type,
      discount_value: Number(discountData.discount_value),
      fee_component: discountData.fee_component || null,
      description: discountData.description || null,
      is_active: discountData.is_active !== undefined ? discountData.is_active : true,
      created_by: discountData.created_by || null
      // tenant_id will be added automatically by the supabase helper
      // id, created_at, updated_at are auto-generated by the database
    }
  };
}

/**
 * Example usage and testing
 */
function testValidation() {
  console.log('üß™ Testing Student Discount Schema Validation\n');
  
  // Test valid data
  const validDiscount = {
    student_id: '12345678-1234-1234-1234-123456789abc',
    class_id: '87654321-4321-4321-4321-cba987654321',
    academic_year: '2024-25',
    discount_type: 'percentage',
    discount_value: 25,
    fee_component: 'tuition_fee',
    description: 'Merit scholarship for excellent performance'
  };
  
  const validResult = validateStudentDiscountSchema(validDiscount);
  console.log('‚úÖ Valid discount data:', validResult);
  
  // Test invalid data
  const invalidDiscount = {
    student_id: null,
    class_id: 'invalid-uuid',
    academic_year: '',
    discount_type: 'invalid_type',
    discount_value: -50,
    fee_component: 123,
    is_active: 'yes'
  };
  
  const invalidResult = validateStudentDiscountSchema(invalidDiscount);
  console.log('\n‚ùå Invalid discount data:', invalidResult);
}

// Uncomment to run tests
// testValidation();

module.exports = {
  validateStudentDiscountSchema
};
