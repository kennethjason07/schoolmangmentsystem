
-- Enable UUID support (required for gen_random_uuid())
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- USERS table (for login system)
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role TEXT CHECK (role IN ('admin', 'principal', 'teacher', 'student', 'parent', 'receptionist')),
    linked_id UUID,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- CLASS table
CREATE TABLE classes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    class_name TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- SECTION table
CREATE TABLE sections (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    section_name TEXT NOT NULL,
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE,
    UNIQUE(class_id, section_name)
);

-- PARENTS table
CREATE TABLE parents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name TEXT NOT NULL,
    phone TEXT,
    email TEXT,
    address TEXT
);

-- STUDENTS table
CREATE TABLE students (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name TEXT NOT NULL,
    dob DATE,
    gender TEXT,
    address TEXT,
    phone TEXT,
    email TEXT,
    admission_date DATE,
    class_id UUID REFERENCES classes(id) ON DELETE SET NULL,
    section_id UUID REFERENCES sections(id) ON DELETE SET NULL,
    roll_no INTEGER,
    parent_id UUID REFERENCES parents(id) ON DELETE SET NULL,
    profile_photo_url TEXT,
    UNIQUE(class_id, section_id, roll_no)
);

-- TEACHERS table
CREATE TABLE teachers (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name TEXT NOT NULL,
    employee_id TEXT UNIQUE NOT NULL,
    contact TEXT,
    joining_date DATE,
    salary NUMERIC
);

-- SUBJECTS table
CREATE TABLE subjects (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL,
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE
);

-- TEACHER_SUBJECTS mapping
CREATE TABLE teacher_subjects (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    teacher_id UUID REFERENCES teachers(id) ON DELETE CASCADE,
    subject_id UUID REFERENCES subjects(id) ON DELETE CASCADE,
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE,
    section_id UUID REFERENCES sections(id) ON DELETE CASCADE
);

-- STUDENT ATTENDANCE
CREATE TABLE student_attendance (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    student_id UUID REFERENCES students(id) ON DELETE CASCADE,
    date DATE,
    status TEXT CHECK (status IN ('present', 'absent', 'late')),
    UNIQUE(student_id, date)
);

-- TEACHER ATTENDANCE
CREATE TABLE teacher_attendance (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    teacher_id UUID REFERENCES teachers(id) ON DELETE CASCADE,
    date DATE,
    status TEXT CHECK (status IN ('present', 'absent', 'late')),
    UNIQUE(teacher_id, date)
);

-- FEE STRUCTURE
CREATE TABLE fee_structure (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE,
    amount NUMERIC NOT NULL,
    due_date DATE
);

-- STUDENT FEES
CREATE TABLE student_fees (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    student_id UUID REFERENCES students(id) ON DELETE CASCADE,
    fee_id UUID REFERENCES fee_structure(id) ON DELETE CASCADE,
    amount_paid NUMERIC,
    payment_date DATE,
    status TEXT CHECK (status IN ('paid', 'unpaid', 'partial'))
);

-- EXAMS
CREATE TABLE exams (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT,
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE,
    date DATE
);

-- MARKS
CREATE TABLE marks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    exam_id UUID REFERENCES exams(id) ON DELETE CASCADE,
    student_id UUID REFERENCES students(id) ON DELETE CASCADE,
    subject_id UUID REFERENCES subjects(id) ON DELETE CASCADE,
    marks_obtained NUMERIC
);

-- HOMEWORK / ASSIGNMENTS
CREATE TABLE homeworks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT,
    description TEXT,
    due_date DATE,
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE,
    section_id UUID REFERENCES sections(id) ON DELETE CASCADE,
    subject_id UUID REFERENCES subjects(id) ON DELETE CASCADE,
    assigned_by UUID REFERENCES teachers(id) ON DELETE CASCADE
);

-- TIMETABLE
CREATE TABLE timetable (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    class_id UUID REFERENCES classes(id) ON DELETE CASCADE,
    section_id UUID REFERENCES sections(id) ON DELETE CASCADE,
    subject_id UUID REFERENCES subjects(id) ON DELETE CASCADE,
    teacher_id UUID REFERENCES teachers(id) ON DELETE CASCADE,
    day_of_week TEXT CHECK (day_of_week IN ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')),
    start_time TIME,
    end_time TIME
);

-- NOTIFICATIONS
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title TEXT,
    message TEXT,
    sent_to_role TEXT,
    sent_to_id UUID,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
